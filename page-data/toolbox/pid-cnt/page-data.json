{"componentChunkName":"component---src-templates-article-js","path":"/toolbox/pid-cnt/","result":{"data":{"mdx":{"id":"74dd3bb9-d1c9-5872-bdf8-024a587859ea","excerpt":"PID Control Content is ready to upload  PID  Proportional Depends on the present error Integral  Integral ,  accumulation of past errors Derivative  D , prediction of future errors ,based on current rate of change   RiseTime   , \nOverShoot  ,\nPIDâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"date\": \"2019-01-01T00:00:00.000Z\",\n  \"description\": \"This is the source\",\n  \"published\": true,\n  \"shareImage\": \"https://res.cloudinary.com/dg3gyk0gu/image/upload/v1571260698/og-image-assets/share_image_getting_started.png\",\n  \"showToc\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", {\n    \"id\": \"pid-control\"\n  }, \"PID Control\"), mdx(\"p\", null, \"Content is ready to upload \"), mdx(\"p\", null, \"PID \"), mdx(\"p\", null, \"Proportional\"), mdx(\"p\", null, \"Depends on the present error\"), mdx(\"p\", null, \"Integral \"), mdx(\"p\", null, \"Integral ,  accumulation of past errors\"), mdx(\"p\", null, \"Derivative \"), mdx(\"p\", null, \"D , prediction of future errors ,based on current rate of change  \"), mdx(\"p\", null, \"RiseTime   ,\\nOverShoot  ,\\nPID Controller ,  \"), mdx(\"p\", null, \"Rise Time ,\\nOvershoot ,\\nPeak time ,\\nSettling Time ,\"), mdx(\"p\", null, \"CL Response \"), mdx(\"p\", null, \" Rise time  , Decrease , Decrease , Small Change\\nOvershoot  , Increase , Increase , Decrease\\nSettling Time , Small Change , Increase , Decrease\\nS-S Error > Decrease , Eliminate , No Change ,\"), mdx(\"p\", null, \"Pixel Processing 1.5 pGpixel\"), mdx(\"p\", null, \"New Breakthroughs \"), mdx(\"p\", null, \"Solid State Lidar\\nPoint and Shoot Lidar \"), mdx(\"p\", null, \"CPU , GPU , DSP  , HWA , FPGA \"), mdx(\"p\", null, \"GPU Thread Level Parellisim\\nDSP Limited instructuin and data level parellisim \"), mdx(\"p\", null, \"MAster Controller and Gateway of ECU\\nSafety Processor\\nUsually ASIL-D \"), mdx(\"p\", null, \"Safety Compliance and Features\\nECC\\nMMU\\nWatchdogs \"), mdx(\"p\", null, \"Software\\nReal Time Beveaviour\\nAsynchronous Compute Scheduling\\nPerformance optimized Libraries \"), mdx(\"p\", null, \"Software and Algorithms\\nHypervisor\"), mdx(\"p\", null, \"Bare Metal Based\\nVM Based\\nInter-Partition Communications\"), mdx(\"p\", null, \"Drivers\\nPeripheral Drivers\\nStorage Drivers\\nCore engine Drivers\\nCommunication Stacks\"), mdx(\"p\", null, \"Middleware \"), mdx(\"p\", null, \"Communication Frame work\\nDiagnostics , Logging\\nError Reporting\\nPerf Accelarated Libs \"), mdx(\"p\", null, \"Algorithms \"), mdx(\"p\", null, \" Classification , Detection , Segmentation\\nCV Techniques ,\\nDL Techniques , \"), mdx(\"p\", null, \" Mapping & Localizations\\nSensor Fusion & Path Planning \"), mdx(\"p\", null, \"Systems\"), mdx(\"p\", null, \" OS - Concurrent Execution and Scheduling \"), mdx(\"p\", null, \"   Priority Based Preemtion\\nTime / Event Triggered\\nAdaptive Partition\"), mdx(\"p\", null, \"Hypervisior \"), mdx(\"p\", null, \" Virtualization of peripherelas\\nIPC\\nOverheads \"), mdx(\"p\", null, \"Algortihms \"), mdx(\"p\", null, \"Data collection \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Supervised Learning \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Reinforcemnet Learning \")), mdx(\"p\", null, \"Synthetic Data Generation and Augmentation\\nComptational Demendsa\\nDependance on Sensors Calibration\\nReplay of Data\\nAlgorithm Validaton\\nSIL\\nSystem Validation and Road Testing\\nNeed for simulation of data and scenarios \"), mdx(\"p\", null, \"Need for open , Modular , Scalable Platform \"), mdx(\"p\", null, \" Nvidia Drive Platform \"), mdx(\"p\", null, \"Current AEB Systems based on Sensor Fusion ( CAM + RADAR )\"), mdx(\"p\", null, \"ADAS system needs to be built with good and felxible EE Architecture\\nCentralControlUnit >> Platform winner will most likely leasd the autonomus driving . Development in the technology of semiconductors and ADAS\\nsoftware is being deeply observed. As of unit numbers ,three to four units seems to be most likely.\"), mdx(\"p\", null, \"For autonomus , AI seems to be inevitable , System Integration will become easier and more active along with 5G , Nevertheless , safety (\\nhacking , power , wrst case environmental scenarios , etc ) is one of the key factors to keep in mind. )\"));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":1,"tableOfContents":{"items":[{"url":"#pid-control","title":"PID Control"}]},"fields":{"slug":"/toolbox/pid-cnt/","guide":"toolbox-guide","github":"https://github.com/eggheadio/how-to-egghead/tree/master/content\\toolbox\\pid-cnt.mdx"},"frontmatter":{"title":"","shareImage":"https://res.cloudinary.com/dg3gyk0gu/image/upload/v1571260698/og-image-assets/share_image_getting_started.png","categories":null,"showToc":true}}},"pageContext":{"id":"74dd3bb9-d1c9-5872-bdf8-024a587859ea"}},"staticQueryHashes":["1655584978","3128451518"]}