{"componentChunkName":"component---src-templates-article-js","path":"/instructor/style-guide/thinking-in-lessons/","result":{"data":{"mdx":{"id":"0e902c0f-43a3-57ae-a69a-d422395db66f","excerpt":"Naming things is hard. Naming things is vital. Giving your lesson a solid title and summary  before you hit record  helps you define the scope of your lesson. With strong titles and summaries, you also make your content more useful and meaningful toâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"date\": \"2019-01-01T00:00:00.000Z\",\n  \"title\": \"Thinking in lessons.\",\n  \"description\": \"Learn about the egghead style and how to apply it to your own content.\",\n  \"categories\": [\"instructor\", \"style\"],\n  \"published\": true,\n  \"shareImage\": \"https://res.cloudinary.com/dg3gyk0gu/image/upload/v1571260698/og-image-assets/share_image_style.png\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Naming things is hard. Naming things is vital.\"), mdx(\"p\", null, \"Giving your lesson a solid title and summary \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"before you hit record\"), \" helps you define the scope of your lesson. With strong titles and summaries, you also make your content more useful and meaningful to the thousands of developers who will watch it.\"), mdx(\"h3\", {\n    \"id\": \"narrow-your-scope\"\n  }, \"Narrow your scope\"), mdx(\"p\", null, \"There are thousands of lessons on egghead that learners find via site and Google search. The best way for them to find your lesson is with a robust, descriptive title.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://media.giphy.com/media/XIqCQx02E1U9W/giphy.gif\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Let's walk through the process of choosing your subject matter, then writing your title and summary.\"), mdx(\"h3\", {\n    \"id\": \"start-with-an-idea\"\n  }, \"Start with an idea:\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\u201CI've been working with React a lot lately. Something interesting about React components and their lifecycle methods that fire at particular times?\\\"\")), mdx(\"p\", null, \"That\\u2019s a cool concept. You might quickly think of something like this for a title:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"React Component Lifecycle Methods\")), mdx(\"p\", null, \"That\\u2019s a tempting title! But it's too broad for a bite-sized lesson. Let's narrow the topic down:\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\\"Reading about lifecycle methods in the React docs, I've noticed that\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*componentWillReceiveProps*\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"isn't as clear as some of the others.\\\"\")), mdx(\"p\", null, \"Now we have a target!\"), mdx(\"h3\", {\n    \"id\": \"summarize-the-concept\"\n  }, \"Summarize the concept\"), mdx(\"p\", null, \"Continuing to drill down on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"componentWillReceiveProps\"), \", we can write a quick summary of what the viewer can expect:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"In this lesson, you will learn to dynamically update a React component's state based on the properties that are passed into it. We will take a look at the React component componentWillReceiveProps lifecycle method, and how to use it effectively.\")), mdx(\"p\", null, \"That\\u2019s a strong, succinct concept that you can reasonably cover in a few minutes. \\u2705\"), mdx(\"h3\", {\n    \"id\": \"write-your-title-the-summary-of-your-summary\"\n  }, \"Write your title (the summary of your summary)\"), mdx(\"p\", null, \"Here's a trick to coming up with a good title: Think \\\"How do I...\\\" and then summarize your summary.\"), mdx(\"p\", null, \"You wouldn't say \\\"How do I... react component lifecycle methods: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"componentWillReceiveProps.\"), \" \\u201D\"), mdx(\"p\", null, \"Instead, you would say something like \\\"How do I... use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"componentWillReceiveProps\"), \" to manage react component state?\\u201D\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Use componentWillReceiveProps to Manage React Component State\")), mdx(\"p\", null, \"That\\u2019s a strong, specific title that tells learners what to expect from the lesson. People watch screencasts to solve specific problems and learn specific things, and good descriptions help them find the answers they\\u2019re looking for.\"), mdx(\"p\", null, \"So our title and summary are:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Use componentWillReceiveProps to Manage React Component State\"), \"\\nIn this lesson, you will learn to dynamically update a React component's state based on the properties that are passed into it. We will take a look at the React component \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"componentWillReceiveProps\"), \" lifecycle method, and how to use it effectively.\")), mdx(\"p\", null, \"\\u2705\\u2705\"));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":2,"tableOfContents":{"items":[{"url":"#narrow-your-scope","title":"Narrow your scope"},{"url":"#start-with-an-idea","title":"Start with an idea:"},{"url":"#summarize-the-concept","title":"Summarize the concept"},{"url":"#write-your-title-the-summary-of-your-summary","title":"Write your title (the summary of your summary)"}]},"fields":{"slug":"/instructor/style-guide/thinking-in-lessons/","guide":"instructor-guide","github":"undefined/content\\instructor\\style-guide\\thinking-in-lessons\\index.mdx"},"frontmatter":{"title":"Thinking in lessons.","shareImage":"https://res.cloudinary.com/dg3gyk0gu/image/upload/v1571260698/og-image-assets/share_image_style.png","categories":["instructor","style"],"showToc":null}}},"pageContext":{"id":"0e902c0f-43a3-57ae-a69a-d422395db66f"}},"staticQueryHashes":["1655584978","3128451518"]}