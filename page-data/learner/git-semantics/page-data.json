{"componentChunkName":"component---src-templates-article-js","path":"/learner/git-semantics/","result":{"data":{"mdx":{"id":"8c1bf485-3f54-5061-9727-869e83f2a650","excerpt":"Git Semantics Learning when and why to use git is equally as important as learning how to use it. In this article, you will learn how to properly apply your git skills so your work will be as transparent as possible.  When to commit? Git is onlyâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"date\": \"2019-05-08T00:00:00.000Z\",\n  \"title\": \"Git Terminology and Learning Resources\",\n  \"description\": \"This article will help get you aquanted with some of the common git terms as well as point you towards a couple of excellent learning resources\",\n  \"categories\": [\"learner\", \"getting-started\"],\n  \"published\": false\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"git-semantics\"\n  }, \"Git Semantics\"), mdx(\"p\", null, \"Learning when and why to use git is equally as important as learning how to use it. In this article, you will learn how to properly apply your git skills so your work will be as transparent as possible. \"), mdx(\"h2\", {\n    \"id\": \"when-to-commit\"\n  }, \"When to commit?\"), mdx(\"p\", null, \"Git is only useful if you are conveying meaning or purpose, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"never\"), \" make a change that does not serve a purpose. The changes you make in a commit should all be purposeful and move you closer to your goal. Commit only when you reach your goal. \"), mdx(\"p\", null, \"If it seems like you are making an excessive amount of changes before you make the commit ask yourself if your goal could get broken down even further. For example, say your goal in a review is to update the workshop examples to work with a new major version of a framework, if you made only a single large commit then you wouldn't be able to have a history in case there were issues with a single lesson that you didn't catch.\"), mdx(\"p\", null, \"Instead of committing when you finish updating the workshop, try to break the task down into sub-goals. Compare the following \\\"commit histories.\\\"\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Committed entire course\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Update course\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Committed individual goals\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Refactor project to use yarn workspaces\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add prettier#1.17.1 to project\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Update lesson 1 packages\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Refactor lesson 1 to use .pipe syntax\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Update lesson 2 packages...\")), mdx(\"p\", null, \"The history in the second example is a lot more useful than the first's. You are at a glance, capable of seeing what happened and in what order.\"));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":1,"tableOfContents":{"items":[{"url":"#git-semantics","title":"Git Semantics","items":[{"url":"#when-to-commit","title":"When to commit?"}]}]},"fields":{"slug":"/learner/git-semantics/","guide":"learner-guide","github":"https://github.com/eggheadio/how-to-egghead/tree/master/content\\learner\\git-semantics.mdx"},"frontmatter":{"title":"Git Terminology and Learning Resources","shareImage":null,"categories":["learner","getting-started"],"showToc":null}}},"pageContext":{"id":"8c1bf485-3f54-5061-9727-869e83f2a650"}},"staticQueryHashes":["1655584978","3128451518"]}