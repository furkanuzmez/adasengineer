{"componentChunkName":"component---src-templates-article-js","path":"/learner/global-gitignore/","result":{"data":{"mdx":{"id":"86d0dc6d-5452-58ce-af60-5d2c2308a6a9","excerpt":"Any file that is machine specific is not to be tracked by git which generally means that if a file is generated locally on your computer, you shouldn't push it up to GitHub.  Some examples of this are: Mac-specific  .DS_Store  files,  node_modulesâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"date\": \"2019-04-04T00:00:00.000Z\",\n  \"title\": \"Ignore Files on your Machine in git, per project and globally\",\n  \"description\": \"Some files are never meant to be pushed to git. Learn how to ignore them.\",\n  \"categories\": [\"learner\"],\n  \"published\": false\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Any file that is machine specific is not to be tracked by git which generally means that if a file is generated locally on your computer, you shouldn't push it up to GitHub. \"), mdx(\"p\", null, \"Some examples of this are: Mac-specific \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".DS_Store\"), \" files, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node_modules/\"), \", and some project specific files/folders like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".cache\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".next\"), \".\"), mdx(\"h2\", {\n    \"id\": \"ignore-files-per-project\"\n  }, \"Ignore Files per Project\"), mdx(\"p\", null, \"Git gives us the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".gitignore\"), \" file that allows us to tell git precisely what we don't ever want to commit. \"), mdx(\"p\", null, \"This file sits at the root of a project, and any file or folder names added into this file are ignored. \"), mdx(\"p\", null, \"Specifically, each line in the file is pattern matched to folders and files in the same path. Pattern matching allows you to ignore all files of a specific type. For example, some projects produce \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".log\"), \" files. You can have git ignore all of them by adding a line with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*.log\"), \".\"), mdx(\"p\", null, \"The pattern format can be found \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://git-scm.com/docs/gitignore#_pattern_format\"\n  }), \"here\"), \".\"), mdx(\"h2\", {\n    \"id\": \"ignore-files-globally\"\n  }, \"Ignore Files globally\"), mdx(\"p\", null, \"As mentioned above, there are some cases that you will want to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"always\"), \" ignore a file type. You can configure a global \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".gitignore\"), \" file to do just that\"), mdx(\"p\", null, \"To do so takes a few steps:\"), mdx(\"p\", null, \"Open a terminal and navigate to root. \"), mdx(\"p\", null, \"Create the global gitignore file running: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"touch .gitignore_global\"), \". \"), mdx(\"p\", null, \"The file name can be anything you want but specifying that this globally effects your machine is recommended.\"), mdx(\"p\", null, \"Now run: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git config --global core.excludesfile ~/.gitignore_global\")), mdx(\"p\", null, \"This command configures git to check this file for patterns (files) to ignore before committing from anywhere on your machine. It's worth noting that any project-specific patterns will take precedence over the patterns specified in a global config.\"), mdx(\"p\", null, \"You're all set to ignore files!\"), mdx(\"h2\", {\n    \"id\": \"recommended-files-to-ignore\"\n  }, \"Recommended Files to Ignore\"), mdx(\"p\", null, \"It's good practice not to ignore files until you know you need to. \"), mdx(\"p\", null, \"There are tools out there like \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.gitignore.io/\"\n  }), \"gitignore.io\"), \" that provide you a fully configured \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".gitignore\"), \" file to add to a project. These templates cover almost all files you could think of ignoring but can add confusion to what is \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"actually\"), \" ignored.\"), mdx(\"p\", null, \"If you prefer clarity, try incrementally building out a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".gitignore\"), \" file before importing a fully configured one. You'll likely find you don't need much.\"), mdx(\"p\", null, \"With that being said, if you develop on a Mac, some pesky files get generated like the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".DS_Store\"), \" that have nothing to do with development. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".DS_Store\"), \" file carries metadata for Finder about things like icon position and view settings. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Not Relevant\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node_modules/\"), \" are another example of files that we can ignore everywhere on our machine. These dependencies are downloaded by everyone else working on your project locally (and likely at a different version!) so no need to push them.\"), mdx(\"p\", null, \"Add the following lines to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/.gitignore_global\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"# Created by Finder\\n.DS_Store\\n\\n# Generated when installing dependencies in JavaScript projects\\nnode_modules/\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":2,"tableOfContents":{"items":[{"url":"#ignore-files-per-project","title":"Ignore Files per Project"},{"url":"#ignore-files-globally","title":"Ignore Files globally"},{"url":"#recommended-files-to-ignore","title":"Recommended Files to Ignore"}]},"fields":{"slug":"/learner/global-gitignore/","guide":"learner-guide","github":"undefined/content\\learner\\global-gitignore\\index.mdx"},"frontmatter":{"title":"Ignore Files on your Machine in git, per project and globally","shareImage":null,"categories":["learner"],"showToc":null}}},"pageContext":{"id":"86d0dc6d-5452-58ce-af60-5d2c2308a6a9"}},"staticQueryHashes":["1655584978","3128451518"]}