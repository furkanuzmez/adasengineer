{"componentChunkName":"component---src-templates-article-js","path":"/identify-changes-in-a-framework","result":{"data":{"mdx":{"id":"0d152b23-bdf8-577e-b865-dd544c1b49ce","excerpt":"Identify Change(s) in a Framework Project Structure JavaScript frameworks are continually changing and updating. A lot of the time this is not an issue for our lessons. JavaSript projects keep track of changes through a  package.json  that can beâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Identify Change(s) in a Framework\",\n  \"slug\": \"identify-changes-in-a-framework\",\n  \"guide\": \"reviewer\",\n  \"chapterTitle\": \"The Review Process\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"identify-changes-in-a-framework\"\n  }, \"Identify Change(s) in a Framework\"), mdx(\"h2\", {\n    \"id\": \"project-structure\"\n  }, \"Project Structure\"), mdx(\"p\", null, \"JavaScript frameworks are continually changing and updating. A lot of the time this is not an issue for our lessons.\"), mdx(\"p\", null, \"JavaSript projects keep track of changes through a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" that can be found in the root of the project. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" file contains the meta-data for the project like the authors' name, a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"scripts\"), \" section, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dependencies\"), \" section, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"devDependencies\"), \" section.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dependencies\"), \" section contains the list of all the libraries used in the project that are essential for the application to run (e.g., React, Angular, Redux, RxJS).\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"name\\\": \\\"redux-course\\\",\\n  \\\"version\\\": \\\"0.1.0\\\",\\n  \\\"private\\\": true,\\n  \\\"dependencies\\\": {\\n    \\\"json-server\\\": \\\"^0.13.0\\\",\\n    \\\"react\\\": \\\"^16.4.0\\\",\\n    \\\"react-dom\\\": \\\"^16.4.0\\\",\\n    \\\"react-redux\\\": \\\"^5.0.5\\\",\\n    \\\"react-router-dom\\\": \\\"^4.1.1\\\",\\n    \\\"redux\\\": \\\"^4.0.0\\\",\\n    \\\"redux-devtools-extension\\\": \\\"^2.13.2\\\",\\n    \\\"redux-thunk\\\": \\\"^2.2.0\\\",\\n    \\\"yarn\\\": \\\"^1.6.0\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"react-scripts\\\": \\\"1.1.4\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"production\\\": \\\"json-server --static ./build db.json\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\",\\n    \\\"dev-server\\\": \\\"json-server -p 8080 db.json\\\"\\n  }\\n}\\n\")), mdx(\"p\", null, \"Each of these dependencies has a version number listed that informs npm (or Yarn) to download the version specified.\"), mdx(\"p\", null, \"The version number follows the Semantic Versioning Specification (SemVer).\"), mdx(\"h2\", {\n    \"id\": \"semantic-versioning-semver\"\n  }, \"Semantic Versioning (SemVer)\"), mdx(\"p\", null, \"SemVer attempts to provide more meaning of the underlying changes in a project through additional structure to version numbers.\"), mdx(\"p\", null, \"Each Version X.Y.Z must be non-negative numbers starting and (supposed to) have non-leading zeroes (though many libraries start at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0.1.0\"), \").\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"X is a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"MAJOR\"), \" version\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Y is a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"MINOR\"), \" version\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Z is a\\xA0\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PATCH\"), \" version\"))), mdx(\"p\", null, \"With these versions specified, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0.2.10\"), \" is ordered before \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0.3.1\"), \" and subsequently, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1.0.0\"), \" comes after both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0.2.10\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0.3.1\"), \".\"), mdx(\"p\", null, \"A PATCH version is incremented when internal bugs are fixed in a library that does not affect any projects. MINOR versions are incremented when there is 'backward compatible' features introduced to a library or significant improvements to the internal workings of the library are added. MAJOR versions are incremented when there are \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Breaking Changes\"), \" introduced to the library.\"), mdx(\"p\", null, \"In the previously mentioned example, theoretically, there are backward compatible features added in-between the packages \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0.2.10\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0.3.1\"), \" versions. When the package reached\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1.0.0\"), \", it can be assumed that it contains breaking changes if you wrote your application on a previous version (e.g., \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0.2.10\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0.3.1\"), \").\"), mdx(\"h3\", {\n    \"id\": \"semver-version-ranges\"\n  }, \"SemVer Version Ranges\"), mdx(\"p\", null, \"A lot of the time, specifying a single version of a technology is too fine grain and restrictive because subsequent MINOR and PATCH updates won't break the project that the dependency is in. It can be annoying to have to update version numbers \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"every\"), \" time a MINOR or PATCH version is released.\"), mdx(\"p\", null, \"This is why SemVer has version ranges which can be denoted a few different ways. The simplest ways are to use a set of primitive operators, which are: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<\"), \" Less than, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<=\"), \" Less than or equal to, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \">\"), \" Greater than, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \">=\"), \" Greater than or equal to, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"=\"), \" Equal. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"=\"), \" can be assumed when no operator is present.\"), mdx(\"p\", null, \"For review, a range specifying \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \">15.3.0 <16.4.1\"), \" says the course started at version \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"15.3.0\"), \" and is valid up to all version (excluding) \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"16.4.1\"), \" where a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<=16.4.1\"), \" will specify the version including \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"16.4.1\"), \".\"), mdx(\"p\", null, \"Simply putting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"15 - 16\"), \" is another way to specify a range that will encompass all MINOR and PATCH versions contained within the MAJOR versions \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"15\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"16\"), \". \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"This is preferred\"), \" as it is the most flexible way to specify a version range. If more specifics are required, other operators can be used.\"), mdx(\"p\", null, \"To make versions easier to specify, the squiggly \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~\"), \" and caret \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"^\"), \" also identify ranges. When\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~\"), \" is placed before version (e.g., \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~15.0.0\"), \"), it specifies all versions incremented at the PATCH level. In other words \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"15.0.1\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"15.0.3\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"15.0.19\"), \" are all valid. In other words,\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~15.0.0\"), \" equals\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \">=15.0.0 <15.1.0\"), \".\"), mdx(\"p\", null, \"The caret\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"^\"), \" specifies all version increments at the MINOR and PATCH levels.\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"^15.0.0\"), \" specifies that any of these following versions are valid: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"15.0.1\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"15.1.3\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"15.5.0\"), \". in other words,\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"^15.0.0\"), \" would equal the range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \">=15.0.0 <16.0.0\"), \".\"), mdx(\"p\", null, \"A great place to explore semantic versioning is the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://semver.npmjs.com/\"\n  }), \"npm SemVer calculator\")), mdx(\"h3\", {\n    \"id\": \"pre-release-versions\"\n  }, \"Pre-release Versions\"), mdx(\"p\", null, \"Many projects will have several pre-release versions published before an official version is published. These pre-release versions are subject to change and can be typically ignored when updating lesson code.\"), mdx(\"p\", null, \"Pre-release tags range from alpha, beta, and rc (release candidate). With the specified order as follows: 1.0.0-alpha < 1.0.0-alpha.1 < 1.0.0-alpha.beta < 1.0.0-beta < 1.0.0-beta.2 < 1.0.0-beta.11 < 1.0.0-rc.1 < 1.0.0.\"), mdx(\"p\", null, \"It is good to note that a pre-release is available and what stage they are in as that likely means a MAJOR version update is close to being published and will trigger more reviews.\"), mdx(\"h2\", {\n    \"id\": \"review-with-semver-versions-in-mind\"\n  }, \"Review with SemVer Versions in Mind\"), mdx(\"p\", null, \"You need to identify these \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Breaking Changes\"), \"\\u200B\\u200B\\u200B\\u200B\\u200B\\u200B\\u200B\\xA0and keep them in mind when watching through lessons.\"), mdx(\"p\", null, \"Each framework or library will have a\\xA0CHANGELOG.md\\xA0that will record the changes of that specific framework. (link to example) Usually found on the respective frameworks github page.\"), mdx(\"p\", null, \"Most frameworks use Semantic Versioning (SemVer) to keep track of updates. We are mostly interested in\\xA0Major\\xA0and\\xA0Minor\"), mdx(\"p\", null, \"Under each new version, there will be a\\xA0Breaking Changes (or similarly named) section that is where you will see what exactly will break any lesson examples that egghead might have.\"), mdx(\"h2\", {\n    \"id\": \"track-course-dependency-information\"\n  }, \"Track Course Dependency Information\"), mdx(\"p\", null, \"egghead is now keeping track of all the relevant dependency versions related to a course\"), mdx(\"p\", null, \"i.e., A course on \\\"State Management with Mobx in React\\\" will track the version range that starts with the course published version and ends with the current version the course example.\"), mdx(\"p\", null, \"Data for this looks like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"\\n{\\n\\xA0 \\xA0 \\xA0 \\xA0 slug: 'manage-complex-state-in-react-apps-with-mobx',\\n\\xA0 \\xA0 \\xA0 \\xA0 dependencies: {\\n\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 mobx: '2 - 5',\\n\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 react: '15 - 16',\\n\\xA0 \\xA0 \\xA0 \\xA0 },\\n\\xA0 \\xA0 \\xA0 \\xA0 reviews: [\\n\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 {\\n\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 performedOn: '2018-07-17',\\n\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 performedBy: 248653,\\n\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 scopeOfReview: 'full course lesson review',\\n\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 notes: [\\n\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 {\\n\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 type: 'major issue',\\n\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 title: 'removed line- \\u201CuseStrict(true);',\\n\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 details: 'The useStrict terminology is no longer recognized',\\n\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 },\\n\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 {\\n\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 type: 'major issue',\\n\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 title: 'Keys and values now return iterators',\\n\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 details:\\n\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 'keys and values now return iterators, to return an array, use Array.from with the iterator https://github.com/mobxjs/mobx/issues/1488',\\n\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 },\\n\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 ],\\n\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 },\\n\\xA0 \\xA0 \\xA0 \\xA0 ],\\n\\xA0 \\xA0 \\xA0 },\\n\")), mdx(\"p\", null, \"As seen above, every review is recorded with the date it was done (in YYYY-MM-DD format), the scope, and most importantly, any notes or issues that came up during the review.\"), mdx(\"p\", null, \"The range specifies the range that starts with package versions that the course was released on and ends with the latest version the course was updated to. For the example specified above, the course was released with React v15 and has since been updated to React v16. The specific MINOR and PATCH versions aren't necessary to specify here because there are no major breaking changes of concern apart from the notes provided.\"));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":3,"tableOfContents":{"items":[{"url":"#identify-changes-in-a-framework","title":"Identify Change(s) in a Framework","items":[{"url":"#project-structure","title":"Project Structure"},{"url":"#semantic-versioning-semver","title":"Semantic Versioning (SemVer)","items":[{"url":"#semver-version-ranges","title":"SemVer Version Ranges"},{"url":"#pre-release-versions","title":"Pre-release Versions"}]},{"url":"#review-with-semver-versions-in-mind","title":"Review with SemVer Versions in Mind"},{"url":"#track-course-dependency-information","title":"Track Course Dependency Information"}]}]},"fields":{"slug":"/reviewer/review/01-identify-changes-in-framework/","guide":null,"github":"https://github.com/eggheadio/how-to-egghead/tree/master/src\\content\\reviewer\\review\\01-identify-changes-in-framework.mdx"},"frontmatter":{"title":"Identify Change(s) in a Framework","shareImage":null,"categories":null,"showToc":null}}},"pageContext":{"id":"0d152b23-bdf8-577e-b865-dd544c1b49ce"}},"staticQueryHashes":["1655584978","3128451518"]}